<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ochain.provider.wheel.dao.AccountCalculateMapper">
  <resultMap id="BaseResultMap" type="com.ochain.provider.wheel.po.AccountCalculate">
    <id column="id" jdbcType="INTEGER" property="accountCalculateId" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="calculate" jdbcType="INTEGER" property="calculate" />
    <result column="civilize_calculate" jdbcType="INTEGER" property="civilizeCalculate" />
    <result column="task_calculate" jdbcType="INTEGER" property="taskCalculate" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_id, calculate, civilize_calculate, task_calculate, create_time, update_time
  </sql>
  <select id="selectByExample" parameterType="com.ochain.provider.wheel.po.AccountCalculateExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from account_calculate
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from account_calculate
    where id = #{accountCalculateId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from account_calculate
    where id = #{accountCalculateId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.ochain.provider.wheel.po.AccountCalculateExample">
    delete from account_calculate
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.ochain.provider.wheel.po.AccountCalculate" useGeneratedKeys="true" keyProperty="accountCalculateId">
    insert into account_calculate (id, user_id, calculate, 
      civilize_calculate, task_calculate, create_time, 
      update_time)
    values (#{accountCalculateId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{calculate,jdbcType=INTEGER}, 
      #{civilizeCalculate,jdbcType=INTEGER}, #{taskCalculate,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.ochain.provider.wheel.po.AccountCalculate" useGeneratedKeys="true" keyProperty="accountCalculateId">
    insert into account_calculate
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="accountCalculateId != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="calculate != null">
        calculate,
      </if>
      <if test="civilizeCalculate != null">
        civilize_calculate,
      </if>
      <if test="taskCalculate != null">
        task_calculate,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="accountCalculateId != null">
        #{accountCalculateId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="calculate != null">
        #{calculate,jdbcType=INTEGER},
      </if>
      <if test="civilizeCalculate != null">
        #{civilizeCalculate,jdbcType=INTEGER},
      </if>
      <if test="taskCalculate != null">
        #{taskCalculate,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ochain.provider.wheel.po.AccountCalculateExample" resultType="java.lang.Long">
    select count(*) from account_calculate
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update account_calculate
    <set>
      <if test="record.accountCalculateId != null">
        id = #{record.accountCalculateId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.calculate != null">
        calculate = #{record.calculate,jdbcType=INTEGER},
      </if>
      <if test="record.civilizeCalculate != null">
        civilize_calculate = #{record.civilizeCalculate,jdbcType=INTEGER},
      </if>
      <if test="record.taskCalculate != null">
        task_calculate = #{record.taskCalculate,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update account_calculate
    set id = #{record.accountCalculateId,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      calculate = #{record.calculate,jdbcType=INTEGER},
      civilize_calculate = #{record.civilizeCalculate,jdbcType=INTEGER},
      task_calculate = #{record.taskCalculate,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.ochain.provider.wheel.po.AccountCalculate">
    update account_calculate
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="calculate != null">
        calculate = #{calculate,jdbcType=INTEGER},
      </if>
      <if test="civilizeCalculate != null">
        civilize_calculate = #{civilizeCalculate,jdbcType=INTEGER},
      </if>
      <if test="taskCalculate != null">
        task_calculate = #{taskCalculate,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{accountCalculateId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ochain.provider.wheel.po.AccountCalculate">
    update account_calculate
    set user_id = #{userId,jdbcType=INTEGER},
      calculate = #{calculate,jdbcType=INTEGER},
      civilize_calculate = #{civilizeCalculate,jdbcType=INTEGER},
      task_calculate = #{taskCalculate,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{accountCalculateId,jdbcType=INTEGER}
  </update>
  
 	<!-- 查询账户算力总数  -->
    <select id="selectAccountCalculateSumList" resultType="com.ochain.provider.wheel.vo.account.AccountCalculateVo">
        select sum(t1.calculate) as totalCalculate, sum(t1.civilize_calculate) as totalCivilizeCalculate, sum(t1.task_calculate) as totalTaskCalculate
        from account_calculate t1, user_info t2 
       	where t1.user_id = t2.id 
       	and t2.status = 1 
       	and t2.login_count >0 
    </select>
    
    <!-- 根据账户算力倒序查询账户算力用户列表 -->
    <select id="selectAccountCalculateUserVoListByCalculate" resultType="com.ochain.provider.wheel.vo.account.AccountCalculateUserVo">
		select 
      	t1.id as accountCalculateId, t1.calculate as calculate, 
      	t1.civilize_calculate as civilizeCalculate, t1.task_calculate as taskCalculate, 
      	t2.id as userId, t2.user_account as userAccount 
        from account_calculate t1, user_info t2 
       	where t1.user_id = t2.id 
       	and t1.calculate > 0 
       	and t2.status = 1 
       	and t2.login_count >0 
       	order by t1.calculate desc
    </select>
    
    <!-- 分页查询账户算力用户列表 -->
    <!-- 实体不能通过'' 来判断 -->
    <select id="selectAccountCalculateUserVoListByPage" parameterType="com.ochain.provider.wheel.param.AccountCalculateParam" resultType="com.ochain.provider.wheel.vo.account.AccountCalculateUserVo">
		select 
      	t1.id as accountCalculateId, t1.calculate as calculate, 
      	t1.civilize_calculate as civilizeCalculate, t1.task_calculate as taskCalculate, 
      	t2.id as userId, t2.user_account as userAccount 
        from account_calculate t1, user_info t2 
       	where t1.user_id = t2.id 
       	and t1.calculate > 0 
       	and t2.status = 1 
       	and t2.login_count >0 
      	<if test="orderByClause != null and orderByClause != ''">
            order by ${orderByClause}
        </if>
		<if test="page != null">
      		limit #{page.offset,jdbcType=INTEGER}, #{page.pageSize,jdbcType=INTEGER}
    	</if>
    </select>
    
	<!-- 根据账户算力倒序查询总条数 -->
    <select id="selectAccountCalculateUserVoRowsByCalculate" resultType="java.lang.Long">
		select count(t1.id) 
        from account_calculate t1, user_info t2 
       	where t1.user_id = t2.id 
       	and t1.calculate > 0 
       	and t2.status = 1 
       	and t2.login_count >0 
    </select>
    
</mapper>